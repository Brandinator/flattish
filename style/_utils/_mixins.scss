// main: ../main.scss

// dynamic text colors
@function set-text-color($bg-color, $text-type) {
  // if bgc is light, return dark colored text
  @if (lightness($bg-color) > 50) {
    @if ($text-type == text) {
      @return $light-text;
    } @else if ($text-type == secondary-text) or if ($text-type == icons) {
      @return $light-secondary-text;
    } @else if ($text-type == hint-text) or if ($text-type == disabled-text) {
      @return $light-disabled-text;
    } @else if ($text-type == divider-text) {
      @return $light-divider-text;
    }
  // if bgc is dark, return light colored text
  } @else if ($text-type == text) {
    @return $dark-text;
  } @else if ($text-type == secondary-text) or if ($text-type == icons) {
    @return $dark-secondary-text;
  } @else if ($text-type == hint-text) or if ($text-type == disabled-text) {
    @return $dark-disabled-text;
  } @else if ($text-type == divider-text) {
    @return $dark-divider-text;
  }
}

// dynamic gear icon
@function set-gearIcon() {
  @if (lightness($primary) > 50) {
    @return transparent url("%%settings%%") no-repeat !important;
  } @else {
    @return transparent url("%%settings-night%%") no-repeat !important;
  }
}

// shadows

// Focus shadow mixin.
@mixin focus-shadow() {
  box-shadow: 0 0 8px rgba(0,0,0,.18),0 8px 16px rgba(0,0,0,.36);
}

@mixin drop-shadow($depth) {
  @if $depth == 0 {
    box-shadow: none;
  }
  @if $depth == 1 {
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0 3px 1px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity),
                0 1px 5px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !important;
  }
  @if $depth == 2 {
    box-shadow: 0 3px 4px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0 3px 3px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity),
                0 1px 8px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !important;
  }
  @if $depth == 3 {
    box-shadow: 0 4px 5px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0 1px 10px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
                0 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity) !important;
  }
  @if $depth == 4 {
    box-shadow: 0 6px 10px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0 1px 18px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
                0 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity) !important;
  }
  @if $depth == 5 {
    box-shadow: 0 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
                0 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity) !important;
  }
  @if $depth == 6 {
    box-shadow: 0 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity),
                0  6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
                0  8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity) !important;
  }
}

@mixin ripple($orig-background-color: transparent, $ripple-color: $light-primary) {
  background: $orig-background-color radial-gradient(circle, rgba($ripple-color, 0.3) 15%, transparent 30%) no-repeat 50% 50% / 0; // color image repeat position size
  @include transition(background 0.3s $animation-curve-linear-out-slow-in, color 0.6s $animation-curve-linear-out-slow-in);

  &:focus {
    outline: 0;
    background-size: 1000%;
  }
}

@mixin material-animation-fast-out-slow-in($duration:0.2s) {
  transition-duration: $duration;
  transition-timing-function: $animation-curve-fast-out-slow-in;
}

@mixin material-animation-linear-out-slow-in($duration:0.2s) {
  transition-duration: $duration;
  transition-timing-function: $animation-curve-linear-out-slow-in;
}

@mixin material-animation-fast-out-linear-in($duration:0.2s) {
  transition-duration: $duration;
  transition-timing-function: $animation-curve-fast-out-linear-in;
}

@mixin material-animation-default($duration:0.2s) {
  transition-duration: $duration;
  transition-timing-function: $animation-curve-default;
}

@mixin transition-default($value: all 0.2s $animation-curve-default) {
  @include transition($value);
}

// burger
@mixin burger($width, $height, $gutter, $border-radius, $color: set-text-color($light-primary, hint-text)) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;
  position: relative;

  &, &:before, &:after {
    display: block;
    width: $width;
    height: $height;
    background-color: $color;
    @include transition-default;
    @if $border-radius != 0 {
      border-radius: $border-radius;
    }
  }

  &:before, &:after {
    position: absolute;
    content: "";
  }

  &:before { top: -($height + $gutter); }

  &:after { top: $height + $gutter; }
}

// link hover effect
@mixin link-underline-transition {
  background: linear-gradient(to top, $primary 50%, transparent 50%);
  background-size: 100% 200%;
  background-position: 0 0;
  background-repeat: no-repeat;
  will-change: background-position;
  @include transition-default;

  &:hover {
    color: set-text-color($primary, text) !important;
    text-decoration: none;
    background-position: 0 100%;
  }
}